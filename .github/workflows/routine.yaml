# √ Rename commits to represent the command it is doing
# √ devtools::document() instead of roxygenize
# Remove re-upping staticimports. Instead use warning on file if an update exists. Then back out of changes. Move to end
# Move description version to package.json logic from here to within shiny's `yarn build`
# √ When building js, also add the `srcjs` folder
# √ Make description to put in the workflow template
# √ Move callable workflows to a new repo
# √ Convert R-CMD-check `config` generation to use R/python, something easier to reason about
# √ How should --donttest be handled? Use `args` in an extra R-CMD-check job
# √ Remove netlify workflow

on:
  workflow_call:
    inputs:
      extra-packages:
        type: string
        default: ""
        required: false
      cache-version:
        type: string
        default: "1"
        required: false
      pandoc-version:
        type: string
        default: "2.7.3"
        required: false
      node-version:
        type: string
        default: "16.x"
        required: false
    # secrets:
    #   token:
    #     required: true

name: routine

jobs:

  routine:
    runs-on: ubuntu-20.04

    env:
      GITHUB_PAT: ${{ github.token }}

    steps:
      - name: Git Pull
      - uses: rstudio/shiny-workflows/.github/internal/checkout@v1

      # Needs the repo to already be checked out
      - name: Git Pull (PR)
        if: github.event_name == 'pull_request'
        uses: r-lib/actions/pr-fetch@v1
        with:
          repo-token: ${{ github.token }}

      - name: Git Config
        uses: rstudio/shiny-workflows/.github/internal/setup-git

      - uses: rstudio/shiny-workflows/setup@v1
        with:
          pandoc-version: ${{ inputs.pandoc-version }}
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          cache-version: ${{ inputs.cache-version }}
          needs: routine
          extra-packages: |
            devtools
            roxygen2
            rmarkdown
            lintr
            decor
            ${{ inputs.extra-packages }}

      - name: Url redirects
        # only perform if in an RC branch (`rc-vX.Y.Z`)
        if: ${{ github.event_name == 'push' && contains(github.ref, '/rc-v') }}
        run: |
          Rscript -e 'if (!require("urlchecker")) pak::pkg_install("r-lib/urlchecker"); urlchecker::url_update()'
          git add -u && git commit -m '`urlchecker::url_update()` (GitHub Actions)' || echo "No link changes to commit"

      # - name: Find static imports
      #   id: static-imports
      #   shell: Rscript {0}
      #   run: |
      #     if (file.exists("R/staticimports.R")) cat("::set-output name=exists::true")
      # - name: Update static imports
      #   if: steps.static-imports.outputs.exists
      #   run: |
      #     Rscript -e 'if (!require("staticimports")) pak::pkg_install("wch/staticimports"); staticimports::import()'
      #     git commit R/staticimports.R -m 'staticimports (GitHub Actions)' || echo "No staticimports changes to commit"

      - name: Document
        run: |
          Rscript -e 'devtools::document()'
          git add DESCRIPTION man/\* NAMESPACE && git commit -m '`devtools::document()` (GitHub Actions)' || echo "No documentation changes to commit"

      - name: Find `./README.Rmd`
        id: readme
        shell: Rscript {0}
        run: |
          if (file.exists("README.Rmd")) cat("::set-output name=exists::true")
      - name: Build Readme
        if: steps.readme.outputs.exists
        run: |
          Rscript -e 'devtools::build_readme(quiet = FALSE)'
          git commit README.md -m '`devtools::build_readme()` (GitHub Actions)' || echo "No readme changes to commit"


      - name: Find `./package.json`
        id: package-json
        shell: Rscript {0}
        run: |
          if (file.exists("package.json")) {
            cat("::set-output name=exists::true")
            if (!require("jsonlite")) pak::pkg_install("jsonlite")
            pkg_scripts <- jsonlite::read_json("package.json")$scripts
            if ("build" %in% names(pkg_scripts)) cat("::set-output name=build::true")
            if ("test" %in% names(pkg_scripts)) cat("::set-output name=test::true")
          }
      # - name: Sync DESCRIPTION and package.json versions
      #   if: steps.package-json.outputs.exists
      #   run: |
      #     Rscript -e 'if (!require("jsonlite")) pak::pkg_install("jsonlite")'
      #     Rscript -e 'pkg <- jsonlite::read_json("package.json", simplifyVector = TRUE)' \
      #     -e 'version <- as.list(read.dcf("DESCRIPTION")[1,])$Version' \
      #     -e 'pkg$version <- gsub("^(\\d+).(\\d+).(\\d+).(.+)$", "\\1.\\2.\\3-alpha.\\4", version)' \
      #     -e 'pkg$files <- as.list(pkg$files)' \
      #     -e 'jsonlite::write_json(pkg, path = "package.json", pretty = TRUE, auto_unbox = TRUE)'
      #     git add package.json && git commit -m 'sync package version (GitHub Actions)' || echo "No pkg version to commit"
      - name: Install node.js
        if: steps.package-json.outputs.exists
        uses: actions/setup-node@v1
        with:
          node-version: "${{ inputs.node-version }}"
      - name: "`yarn build`"
        if: steps.package-json.outputs.build
        run: |
          if [ -d "srcts/types" ]; then
            rm -r srcts/types
          fi
          yarn install --immutable && yarn build
          git add ./inst ./srcts ./srcjs && git commit -m '`yarn build` (GitHub Actions)' || echo "No yarn build changes to commit"

      - name: Run local before-routine-push step
        uses: rstudio/shiny-workflows/.github/internal/run-local-step@v1
        with:
          name: before-routine-push

      - name: Git Push (PR)
        uses: r-lib/actions/pr-push@v1
        if: github.event_name == 'pull_request'
        with:
          repo-token: ${{ github.token }}
      # - name: Git Push (main)
      #   if: github.event_name == 'push'
      #   run: |
      #     git push https://${{github.actor}}:${{github.token}}@github.com/${{github.repository}}.git HEAD:${{ github.ref }} || echo "No changes to push"
      - name: Verify no un-pushed commits (main)
        if: github.event_name == 'push'
        run: |
          # Do not push to main branch
          if [ -n "`git cherry origin/HEAD`" ]; then
            echo "Un-pushed commits:"
            git cherry -v origin/HEAD
            echo "::error:: Should not push to HEAD branch. Please make a PR to have changes be collected. Exiting"
            exit 1
          fi

      # Execute these steps after pushing, as no updated files will be produced

      - name: Run local after-routine-push step
        uses: rstudio/shiny-workflows/.github/internal/run-local-step@v1
        with:
          name: after-routine-push

      - name: Find `./codecov.yml`
        id: covr
        shell: Rscript {0}
        run: |
          if (file.exists("codecov.yml")) cat("::set-output name=exists::true")
      - name: Code Coverage
        if: steps.covr.outputs.exists
        shell: Rscript {0}
        run: |
          # might need to move up above / install system deps
          if (!require("covr")) pak::pkg_install("covr")
          covr::codecov()

      - name: Find `./.lintr`
        id: lintr
        shell: Rscript {0}
        run: |
          if (file.exists(".lintr")) cat("::set-output name=exists::true")
      - name: "`devtools::lint()`"
        if: steps.lintr.outputs.exists
        shell: Rscript {0}
        run: |
          Sys.setlocale(locale = "C")
          package_lints <- devtools::lint(cache = FALSE)
          if (length(package_lints) > 0) str(package_lints)
          testthat::expect_length(package_lints, 0)

      - name: "`yarn test`"
        if: steps.package-json.outputs.test
        run: |
          yarn test
