
on:
  workflow_call:
    inputs:
      extra-packages:
        type: string
        default: ""
        required: false
      cache-version:
        type: string
        default: "2"
        required: false
      pandoc-version:
        type: string
        default: "2.7.3"
        required: false
      node-version:
        type: string
        default: "16.x"
        required: false
      staticimports:
        type: boolean
        default: true
        required: false
    # secrets:
    #   token:
    #     required: true

name: routine

jobs:

  routine:
    runs-on: ubuntu-20.04

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout GitHub repo
        uses: rstudio/shiny-workflows/.github/internal/checkout@v1

      # Needs the repo to already be checked out
      - name: Git Pull (PR)
        if: github.event_name == 'pull_request'
        uses: r-lib/actions/pr-fetch@v1
        with:
          repo-token: ${{ github.token }}

      - name: Git Config
        uses: rstudio/shiny-workflows/.github/internal/setup-git@v1

      - name: Install R, system dependencies, and package dependencies
        uses: rstudio/shiny-workflows/setup-r-package@v1
        with:
          pandoc-version: ${{ inputs.pandoc-version }}
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          cache-version: ${{ inputs.cache-version }}
          needs: routine
          extra-packages: |
            devtools
            roxygen2
            rmarkdown
            lintr
            jsonlite
            ${{ inputs.extra-packages }}

      - name: "`urlchecker::url_update()`; Update urls found in package; Only rc-v** branches"
        # Only perform if in an RC branch (`rc-vX.Y.Z`)
        if: ${{ github.event_name == 'push' && contains(github.ref, '/rc-v') }}
        run: |
          Rscript -e 'if (!require("urlchecker", quietly = TRUE)) pak::pkg_install("r-lib/urlchecker"); urlchecker::url_update()'
          git add -u && git commit -m '`urlchecker::url_update()` (GitHub Actions)' || echo "No link changes to commit"


      - name: "`devtools::document()`; Document package"
        run: |
          Rscript -e 'devtools::document()'
          git commit DESCRIPTION man/ NAMESPACE -m '`devtools::document()` (GitHub Actions)' || echo "No documentation changes to commit"

      - name: Find `README.Rmd`
        id: readme
        shell: Rscript {0}
        run: |
          if (file.exists("README.Rmd")) cat("::set-output name=exists::true")
      - name: "`devtools::build_readme()`; Build README.md from README.Rmd"
        if: steps.readme.outputs.exists
        run: |
          Rscript -e 'devtools::build_readme(quiet = FALSE)'
          git commit README.md man/figures -m '`devtools::build_readme()` (GitHub Actions)' || echo "No readme changes to commit"


      - name: Find `package.json`
        id: package-json
        shell: Rscript {0}
        run: |
          if (file.exists("package.json")) {
            cat("::set-output name=exists::true")
            pkg_scripts <- jsonlite::read_json("package.json")$scripts
            if ("build" %in% names(pkg_scripts)) {
              message("Can call `yarn build`")
              cat("::set-output name=build::true")
            }
            if ("test" %in% names(pkg_scripts)) {
              message("Can call `yarn test`")
              cat("::set-output name=test::true")
            }
          }
      - name: Install node.js
        if: steps.package-json.outputs.exists
        uses: actions/setup-node@v1
        with:
          node-version: "${{ inputs.node-version }}"
      - name: "`yarn build`"
        if: steps.package-json.outputs.build
        run: |
          if [ -d "srcts/types" ]; then
            rm -r srcts/types
          fi
          yarn install --immutable && yarn build
          git commit ./inst ./srcts ./srcjs -m '`yarn build` (GitHub Actions)' || echo "No yarn build changes to commit"

      - name: Run 'routine' script
        uses: rstudio/shiny-workflows/.github/internal/run-local-script@v1
        with:
          name: routine

      - name: Git Push (PR)
        uses: r-lib/actions/pr-push@v1
        if: github.event_name == 'pull_request'
        with:
          repo-token: ${{ github.token }}
      - name: Verify no un-pushed commits (main)
        if: github.event_name == 'push'
        run: |
          # Do not push to main branch
          if [ -n "`git cherry origin/HEAD`" ]; then
            echo "Un-pushed commits:"
            git cherry -v origin/HEAD
            echo "::error:: Some auto generated commits were found. GHA should not auto-push to the HEAD branch. Please make a PR to have the changes be collected. Exiting"
            exit 1
          fi

      # Execute these steps after pushing, as
      # no updated files will be commited back to GitHub

      - name: Find `codecov.yml`
        id: covr
        shell: Rscript {0}
        run: |
          if (file.exists("codecov.yml")) cat("::set-output name=exists::true")
      - name: "`covr::codecov()`; Run tests and find code coverage"
        if: steps.covr.outputs.exists
        shell: Rscript {0}
        run: |
          # might need to move up above / install system deps
          if (!require("covr", quietly = TRUE)) pak::pkg_install("covr")
          covr::codecov()

      - name: Find `.lintr`
        id: lintr
        shell: Rscript {0}
        run: |
          if (file.exists(".lintr")) cat("::set-output name=exists::true")
      - name: "`devtools::lint()`; Lint package"
        if: steps.lintr.outputs.exists
        shell: Rscript {0}
        run: |
          Sys.setlocale(locale = "C")
          package_lints <- devtools::lint(cache = FALSE)
          if (length(package_lints) > 0) str(package_lints)
          testthat::expect_length(package_lints, 0)

      - name: "`yarn test`"
        if: steps.package-json.outputs.test
        run: |
          yarn test


      - name: "Find `staticimports`"
        if: inputs.staticimports
        id: static-imports
        shell: Rscript {0}
        run: |
          # If any file contains `# @staticimports` in the R folder...
          if (system("grep -e '# @staticimports' -r R -q") == 0) {
            cat("::set-output name=exists::true")
          }
      - name: Check for staticimports updates
        if: steps.static-imports.outputs.exists
        shell: bash
        run: |
          Rscript -e 'if (!require("staticimports", quietly = TRUE)) pak::pkg_install("wch/staticimports"); staticimports::import()'

          # Display the git diff here; Could turn off with `--quiet`
          if git diff --exit-code -- R; then
            FILE="R/staticimports.R"
            if [ ! -f "R/staticimports.R" ]; then
              # Find the first file instead
              FILE=$(git ls-files -dm R | head -n 1);
            fi
            echo "::warning file=$FILE,title=staticimports::$FILE is out of date. To update, call \`staticimports::import()\`. To opt out of this check, set \`staticimports: false\` in the routine.yaml args"
          fi
