name: 'Install macOS brew dependencies'
description: 'Install all brew dependencies given the family tree. This is a poor mans version of package manager until it gets mac support'
author: 'Barret Schloerke'
inputs:
  needs:
    default: ""
    description: "Name of config to search in `DESCRIPTION` file. Ex: `website`"
    required: false
  extra-packages:
    default: ""
    description: String of extra packages
    required: false
runs:
  using: "composite"
  steps:
    - name: Brew dependencies
      shell: Rscript {0}
      run: |
        # Install macOS system dependencies
        if (identical(Sys.getenv("RUNNER_OS", "NOT MAC"), "macOS")) {
          cat("::group::Install macOS system dependencies\n")
          # TODO-future; Find a way to not use `pak`? Hopefully RSPM will handle this in the future
          if (!require("pak", quietly = TRUE)) {
            options(pak.no_extra_messages = TRUE)
            install.packages("pak", repos = "https://r-lib.github.io/p/pak/stable/")
          }
          pkg_deps <- c(
            # Local deps
            pak::local_dev_deps(dependencies = TRUE)[["package"]],
            # Needs deps
            if (nzchar("${{ inputs.needs }}")) pak::local_dev_deps(dependencies = "Config/Needs/${{ inputs.needs }}")[["package"]],
            # Extra package deps
            if (nzchar("${{ inputs.extra-packages")) pak::pkg_deps(strsplit("${{ inputs.extra-packages }}", "[[:space:],]+")[[1]], dependencies = TRUE)[["package"]],
          )
          desc_lines <- tryCatch(paste0(readLines("DESCRIPTION"), collapse = "\n"), error = function(e) "")
          has_dep <- function(pkgs) {
            if (any(pkgs %in% pkg_deps)) return(TRUE)
            for (pkg in pkgs) {
              if (grepl(pkg, desc_lines, fixed = TRUE)) return(TRUE)
            }
            FALSE
          }
          run_cmds <- function(...) {
            # Make sure exit is success
            lapply(paste0(...), function(cmd) {
              message(cmd)
              stopifnot(system(cmd) == 0)
              cmd
            })
          }
          infos <- list(
            Cairo = c("--cask xquartz", "cairo"),
            textshaping = "harfbuzz fribidi",
            rgeos = "geos",
            rgdal = "pkg-config proj gdal"
          )
          # If the package exists, run the brew install commands
          Map(names(infos), infos, f = function(pkg, brew_cmds) {
            if (has_dep(pkg)) {
              run_cmds("brew install ", brew_cmds)
            }
          })
          ## Special instructions: https://github.com/r-spatial/sf/blame/5ec8751b366246ed84fee3ebad7899bc3eb8bd47/README.md#L72-L89
          #if (has_dep("rgdal") && has_dep("sf")) {
          #  # > If you are using `sf` and `rgdal` together, it is necessary to install `rgdal` from source using this configuration:
          #  install.packages("rgdal", configure.args = c("--with-proj-lib=/usr/local/lib/", "--with-proj-include=/usr/local/include/"))
          #}
          #if (has_dep("sf")) {
          #  install.packages("sf", configure.args = "--with-proj-lib=/usr/local/lib/")
          #}
        }
