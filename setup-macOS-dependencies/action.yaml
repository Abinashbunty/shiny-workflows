name: 'Install macOS brew dependencies'
description: 'Install all brew dependencies given the family tree. This is a poor mans version of package manager until it gets mac support'
author: 'Barret Schloerke'
inputs:
  needs:
    default: ""
    description: "Name of config to search in `DESCRIPTION` file. Ex: `website`"
    required: false
  extra-packages:
    default: ""
    description: String of extra packages
    required: false
runs:
  using: "composite"
  steps:
    - name: Brew dependencies
      shell: Rscript {0}
      run: |
        # Install macOS system dependencies
        if (identical(Sys.getenv("RUNNER_OS", "NOT MAC"), "macOS")) {
          cat("::group::Install macOS system dependencies\n")
          # TODO-future; Find a way to not use `pak`? Hopefully RSPM will handle this in the future
          if (!require("pak", quietly = TRUE)) {
            options(pak.no_extra_messages = TRUE)
            install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))
          }
          if (any(
            grepl("url::", "${{ inputs.extra-packages }}", fixed = TRUE),
            file.exists("DESCRIPTION") &&
              any(grepl("url::", readLines("DESCRIPTION"), fixed = TRUE))
          )) {
            # Need for url remotes. See https://github.com/r-lib/actions/issues/562#issuecomment-1129088041
            install.packages("digest", repos = "http://cran.us.r-project.org")
          }
          split_pkg_str <- function(txt) {
            strsplit(txt, "[[:space:],]+")[[1]]
          }
          pkg_deps <- NULL
          if (file.exists("DESCRIPTION")) {
            # Local deps
            pkg_deps <- c(pkg_deps, pak::local_dev_deps(dependencies = TRUE)[["package"]])
          }
          # Needs deps; Must find all dependencies of of the needs pkgs
          if (nzchar("${{ inputs.needs }}") && file.exists("DESCRIPTION")) {
            needs_pkgs <- as.list(read.dcf("DESCRIPTION")[1,])[["Config/Needs/${{ inputs.needs }}"]]
            if (!is.null(needs_pkgs)) {
              pkg_deps <- c(
                pkg_deps,
                pak::pkg_deps(split_pkg_str(needs_pkgs), dependencies = TRUE)[["package"]]
              )
            }
          }
          # Extra package deps
          if (nzchar("${{ inputs.extra-packages }}")) {
            pkg_deps <- c(
              pkg_deps,
              pak::pkg_deps(split_pkg_str("${{ inputs.extra-packages }}"), dependencies = TRUE)[["package"]]
            )
          }
          cat("Packages found:\n"); print(pkg_deps)
          has_dep <- function(pkgs) {
            any(pkgs %in% pkg_deps)
          }
          run_cmds <- function(...) {
            # Make sure exit is success
            lapply(paste0(...), function(cmd) {
              message(cmd)
              stopifnot(system(cmd) == 0)
              cmd
            })
          }
          infos <- list(
            Cairo = c("--cask xquartz", "cairo"),
            FreeType = "freetype",
            textshaping = "harfbuzz fribidi",
            rgeos = "geos",
            rgdal = "pkg-config proj gdal",
            terra = "pkg-config proj geos gdal sqlite",
            units = "udunits"
          )
          # If the package exists, run the brew install commands
          Map(names(infos), infos, f = function(pkg, brew_cmds) {
            if (has_dep(pkg)) {
              run_cmds("brew install ", brew_cmds)
            }
          })
        }
